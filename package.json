<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🏴‍☠️ One Piece Bot Files - Copy & Paste</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 30px;
            backdrop-filter: blur(10px);
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .file-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 25px;
            border-left: 4px solid #ffd700;
        }
        
        .file-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
            background: rgba(0, 0, 0, 0.2);
            padding: 10px 15px;
            border-radius: 5px;
        }
        
        .file-path {
            font-family: 'Courier New', monospace;
            color: #ffd700;
            font-weight: bold;
            font-size: 1.2em;
            flex: 1;
        }
        
        .file-content {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 5px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.85em;
            white-space: pre-wrap;
            overflow-x: auto;
            color: #e0e0e0;
            cursor: pointer;
            user-select: all;
        }
        
        .file-content:hover {
            background: #2a2a2a;
        }
        
        .instructions {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid #ffc107;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
        }
        
        .step {
            margin-bottom: 10px;
            padding-left: 20px;
        }
        
        .highlight {
            background: rgba(255, 193, 7, 0.2);
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        
        .folder-structure {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            font-family: 'Courier New', monospace;
            border-left: 4px solid #28a745;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🏴‍☠️ One Piece Discord Bot Files</h1>
            <p>Click on any code block to select all text, then copy and paste!</p>
        </div>
        
        <div class="instructions">
            <h3 style="color: #ffc107; margin-bottom: 15px;">⚓ Setup Instructions:</h3>
            <div class="step">1. <strong>Create folder structure</strong> as shown below</div>
            <div class="step">2. <strong>Click each code block</strong> to select all text</div>
            <div class="step">3. <strong>Copy (Ctrl+C)</strong> and create the file with that content</div>
            <div class="step">4. <strong>Place each file</strong> in the correct folder</div>
            <div class="step">5. Open terminal and run: <span class="highlight">npm install</span></div>
            <div class="step">6. Copy <span class="highlight">.env.example</span> to <span class="highlight">.env</span> and add your Discord bot token</div>
            <div class="step">7. Run: <span class="highlight">npm start</span></div>
        </div>
        
        <div class="folder-structure">
            <h3 style="color: #28a745; margin-bottom: 15px;">📁 Create This Folder Structure First:</h3>
            <pre>One-Piece-VC/
├── package.json
├── .env.example
├── .gitignore
├── README.md
├── LICENSE
├── src/
│   ├── index.js
│   ├── bot/
│   │   └── DynamicVoiceBot.js
│   ├── utils/
│   │   └── logger.js
│   └── constants/
│       └── permissions.js
├── config/
│   ├── config.js
│   └── channels.js
├── docs/
│   ├── SETUP.md
│   └── CONFIGURATION.md
└── scripts/
    └── start.sh</pre>
        </div>

        <!-- Files with content -->
        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 package.json</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">{
  "name": "one-piece-discord-bot",
  "version": "1.0.0",
  "description": "A One Piece themed Discord bot that dynamically creates and manages voice channels",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
  "keywords": ["discord", "bot", "one-piece", "voice-channels"],
  "author": "ExoCode33",
  "license": "MIT",
  "dependencies": {
    "discord.js": "^14.14.1",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "engines": {
    "node": ">=16.0.0"
  }
}</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 .env.example</div>
            </div>
            <div class="file-content" onclick="selectAll(this)"># Discord Bot Configuration
DISCORD_TOKEN=your_discord_bot_token_here
CLIENT_ID=your_bot_client_id_here

# Bot Settings
CREATE_CHANNEL_NAME=🏴‍☠️ Set Sail Together
CATEGORY_NAME=🌊 Grand Line Voice Channels
DELETE_DELAY=5000

# Development
NODE_ENV=production
DEBUG=false</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 .gitignore</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">node_modules/
.env
*.log
.DS_Store
Thumbs.db
dist/
build/
tmp/
temp/</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 src/index.js</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">const DynamicVoiceBot = require('./bot/DynamicVoiceBot');

// Create and start the bot
const bot = new DynamicVoiceBot();

// Handle graceful shutdown
process.on('SIGINT', async () => {
    await bot.stop();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    await bot.stop();
    process.exit(0);
});

// Start the bot
bot.start().catch(console.error);</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 src/bot/DynamicVoiceBot.js</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">const { Client, GatewayIntentBits, ChannelType, PermissionFlagsBits } = require('discord.js');
const config = require('../../config/config');
const { onePieceChannels } = require('../../config/channels');

class DynamicVoiceBot {
    constructor() {
        this.client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildVoiceStates
            ]
        });
        
        this.createdChannels = new Set();
        this.deleteTimers = new Map();
        this.usedChannelNames = new Set();
        
        this.setupEventListeners();
    }

    setupEventListeners() {
        this.client.once('ready', () => {
            console.log(`✅ Pirate Bot is ready! Logged in as ${this.client.user.tag} 🏴‍☠️`);
            this.setupGuilds();
        });

        this.client.on('voiceStateUpdate', (oldState, newState) => {
            this.handleVoiceStateUpdate(oldState, newState);
        });

        this.client.on('error', console.error);
    }

    async setupGuilds() {
        for (const guild of this.client.guilds.cache.values()) {
            await this.setupGuild(guild);
        }
    }

    async setupGuild(guild) {
        try {
            let category = guild.channels.cache.find(
                c => c.name === config.categoryName && c.type === ChannelType.GuildCategory
            );

            if (!category) {
                category = await guild.channels.create({
                    name: config.categoryName,
                    type: ChannelType.GuildCategory,
                });
                console.log(`📁 Created category: ${config.categoryName} 🏴‍☠️`);
            }

            let createChannel = guild.channels.cache.find(
                c => c.name === config.createChannelName && c.type === ChannelType.GuildVoice
            );

            if (!createChannel) {
                createChannel = await guild.channels.create({
                    name: config.createChannelName,
                    type: ChannelType.GuildVoice,
                    parent: category.id,
                    permissionOverwrites: [
                        {
                            id: guild.roles.everyone.id,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.Connect]
                        }
                    ]
                });
                console.log(`⚓ Created join channel: ${config.createChannelName}`);
            }

            await this.cleanupEmptyChannels(guild);

        } catch (error) {
            console.error(`❌ Error setting up guild ${guild.name}:`, error);
        }
    }

    async handleVoiceStateUpdate(oldState, newState) {
        const guild = newState.guild || oldState.guild;
        
        if (newState.channel) {
            await this.handleChannelJoin(newState, guild);
        }

        if (oldState.channel) {
            await this.handleChannelLeave(oldState, guild);
        }
    }

    async handleChannelJoin(newState, guild) {
        const channel = newState.channel;
        
        if (channel.name === config.createChannelName) {
            await this.createNewVoiceChannel(newState.member, guild, channel.parent);
        }

        if (this.deleteTimers.has(channel.id)) {
            clearTimeout(this.deleteTimers.get(channel.id));
            this.deleteTimers.delete(channel.id);
            console.log(`⏸️ Cancelled disbanding ${channel.name} - new crew member joined!`);
        }
    }

    async handleChannelLeave(oldState, guild) {
        const channel = oldState.channel;
        
        if (this.createdChannels.has(channel.id) && channel.members.size === 0) {
            const timer = setTimeout(async () => {
                try {
                    const currentChannel = guild.channels.cache.get(channel.id);
                    if (currentChannel && currentChannel.members.size === 0) {
                        await currentChannel.delete('Crew disbanded - setting sail elsewhere 🌊');
                        this.createdChannels.delete(channel.id);
                        this.usedChannelNames.delete(channel.name);
                        console.log(`🌊 Disbanded empty crew: ${channel.name}`);
                    }
                } catch (error) {
                    console.error(`❌ Error deleting channel ${channel.name}:`, error);
                }
                this.deleteTimers.delete(channel.id);
            }, config.deleteDelay);

            this.deleteTimers.set(channel.id, timer);
            console.log(`⏰ Crew ${channel.name} will disband in ${config.deleteDelay/1000}s if no one joins`);
        }
    }

    async createNewVoiceChannel(member, guild, parentCategory) {
        try {
            const channelName = this.getRandomChannelName();
            
            const newChannel = await guild.channels.create({
                name: channelName,
                type: ChannelType.GuildVoice,
                parent: parentCategory,
                permissionOverwrites: [
                    {
                        id: guild.roles.everyone.id,
                        allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.Connect]
                    },
                    {
                        id: member.id,
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.Connect,
                            PermissionFlagsBits.ManageChannels,
                            PermissionFlagsBits.MoveMembers
                        ]
                    }
                ]
            });

            this.createdChannels.add(newChannel.id);
            await member.voice.setChannel(newChannel);

            console.log(`🏴‍☠️ Created new pirate crew: ${channelName} for Captain ${member.user.tag}!`);

        } catch (error) {
            console.error(`❌ Error creating voice channel for ${member.user.tag}:`, error);
        }
    }

    getRandomChannelName() {
        const availableNames = onePieceChannels.filter(name => !this.usedChannelNames.has(name));
        
        if (availableNames.length === 0) {
            this.usedChannelNames.clear();
            availableNames.push(...onePieceChannels);
        }
        
        const randomName = availableNames[Math.floor(Math.random() * availableNames.length)];
        this.usedChannelNames.add(randomName);
        
        return randomName;
    }

    async cleanupEmptyChannels(guild) {
        const channels = guild.channels.cache.filter(
            c => c.type === ChannelType.GuildVoice && 
                onePieceChannels.includes(c.name) &&
                c.members.size === 0 &&
                c.name !== config.createChannelName
        );

        for (const channel of channels.values()) {
            try {
                await channel.delete('Cleanup abandoned crew on startup 🏴‍☠️');
                console.log(`🧹 Cleaned up abandoned crew: ${channel.name}`);
            } catch (error) {
                console.error(`❌ Error cleaning up channel ${channel.name}:`, error);
            }
        }
    }

    async start() {
        try {
            await this.client.login(config.token);
        } catch (error) {
            console.error('❌ Failed to login:', error);
            process.exit(1);
        }
    }

    async stop() {
        console.log('🛑 The pirate crew is disbanding...');
        
        for (const timer of this.deleteTimers.values()) {
            clearTimeout(timer);
        }
        
        await this.client.destroy();
    }
}

module.exports = DynamicVoiceBot;</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 config/config.js</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">require('dotenv').config();

module.exports = {
    token: process.env.DISCORD_TOKEN,
    clientId: process.env.CLIENT_ID,
    createChannelName: process.env.CREATE_CHANNEL_NAME || '🏴‍☠️ Set Sail Together',
    categoryName: process.env.CATEGORY_NAME || '🌊 Grand Line Voice Channels',
    deleteDelay: parseInt(process.env.DELETE_DELAY) || 5000,
    debug: process.env.DEBUG === 'true'
};</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 config/channels.js</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">// Lore-accurate One Piece channel names
const onePieceChannels = [
    '⚓ Going Merry',
    '🦁 Thousand Sunny',
    '🏴‍☠️ Moby Dick',
    '💀 Queen Mama Chanter',
    '🌊 Red Force',
    '⚔️ Oro Jackson',
    '🏝️ Laugh Tale',
    '🌺 Amazon Lily',
    '🐘 Zou',
    '🍰 Whole Cake Island',
    '🌸 Wano Country',
    '🏛️ Alabasta Palace',
    '🌊 Water 7',
    '⚙️ Enies Lobby',
    '🌋 Marineford',
    '🏴‍☠️ Impel Down',
    '🐠 Fish-Man Island',
    '☁️ Skypeia',
    '🏜️ Drum Island',
    '🌴 Thriller Bark',
    '🦴 Little Garden',
    '🌪️ Whisky Peak',
    '🗡️ Shimotsuki Village',
    '🍊 Cocoyasi Village',
    '🎪 Orange Town',
    '🌊 Loguetown',
    '🏔️ Reverse Mountain',
    '🐋 Laboon\'s Lighthouse',
    '🌊 Sabaody Archipelago',
    '🌸 Dressrosa'
];

module.exports = { onePieceChannels };</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 src/utils/logger.js</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">const config = require('../../config/config');

class Logger {
    static log(message) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] ${message}`);
    }

    static error(message, error) {
        const timestamp = new Date().toISOString();
        console.error(`[${timestamp}] ERROR: ${message}`, error);
    }

    static debug(message) {
        if (config.debug) {
            const timestamp = new Date().toISOString();
            console.debug(`[${timestamp}] DEBUG: ${message}`);
        }
    }
}

module.exports = Logger;</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 src/constants/permissions.js</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">const { PermissionFlagsBits } = require('discord.js');

module.exports = {
    CAPTAIN_PERMISSIONS: [
        PermissionFlagsBits.ViewChannel,
        PermissionFlagsBits.Connect,
        PermissionFlagsBits.ManageChannels,
        PermissionFlagsBits.MoveMembers
    ],
    CREW_PERMISSIONS: [
        PermissionFlagsBits.ViewChannel,
        PermissionFlagsBits.Connect
    ]
};</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 README.md</div>
            </div>
            <div class="file-content" onclick="selectAll(this)"># 🏴‍☠️ One Piece Discord Voice Bot

A Discord bot that creates dynamic voice channels with authentic One Piece locations and ships! Set sail with your crew and explore the Grand Line together!

## ⭐ Features

- 🚢 **Dynamic Voice Channels** - Automatically creates channels when needed
- 🏝️ **Lore-Accurate Names** - 30+ authentic One Piece locations and ships
- 👑 **Captain Permissions** - Channel creators get admin rights
- 🌊 **Auto-Cleanup** - Empty crews disband automatically
- 🏴‍☠️ **Pirate Theme** - Full One Piece immersion with themed messages

## 🚀 Quick Start

1. **Install dependencies**
   ```bash
   npm install
   ```

2. **Configure your bot**
   ```bash
   cp .env.example .env
   # Edit .env with your Discord bot token
   ```

3. **Start the bot**
   ```bash
   npm start
   ```

## 📖 Bot Setup

1. Create a Discord Application at [Discord Developer Portal](https://discord.com/developers/applications)
2. Create a Bot and copy the token
3. Add the token to your `.env` file
4. Invite the bot with these permissions:
   - Manage Channels
   - Connect
   - Move Members
   - View Channels

## 🏴‍☠️ How It Works

1. Join "🏴‍☠️ Set Sail Together" channel
2. Bot creates a new pirate crew with a One Piece themed name
3. You become the captain with admin permissions
4. Empty crews automatically disband after 5 seconds

## 📝 License

This project is licensed under the MIT License.</div>
        </div>

        <div class="file-section">
            <div class="file-header">
                <div class="file-path">📄 LICENSE</div>
            </div>
            <div class="file-content" onclick="selectAll(this)">MIT License

Copyright (c) 2025 ExoCode33

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</div>
        </div>
    </div>

    <script>
        function selectAll(element) {
            if (window.getSelection) {
                const selection = window.getSelection();
                const range = document.createRange();
                range.selectNodeContents(element);
                selection.removeAllRanges();
                selection.addRange(range);
            }
        }
    </script>
</body>
</html>
